최대 공약수(GCD)
두 수의 공통된 약수중에서 가장 큰 값

두 수 12와 18의 최대공약수를 구해봅시다.
12의 약수: 1, 2, 3, 4, 6, 12
18의 약수: 1, 2, 3, 6, 9, 18
두 수의 공통된 약수는 1, 2, 3, 6입니다.
이 중 가장 큰 수는 6이므로, 12와 18의 최대공약수는 6입니다.

최소 공배수(LCM)
즉, 두 수의 공통된 배수 중에서 가장 작은 값을 말합니다.

12의 배수: 12, 24, 36, 48, 60, 72, ...
18의 배수: 18, 36, 54, 72, ...
두 수의 공통된 배수 중 가장 작은 수는 36입니다.
따라서, 12와 18의 최소공배수는 36입니다.


최대 공약수 구현 -> 유클리드 알고리즘 사용

유클리드 알고리즘의 단계

1. 두 정수 a , b 를 입력 받는다.

2.
r = a mod b (a 를 b로 나눈 나머지)
a = b , b = r
위 과정을 r이 0이 될때까지 반복한다.
이 때 출력되는 b가 최대 공약수이다.


최소 공배수 구현 -> 최대 공약수 이용
공식은
LCM(a,b) = |a * b] / GCD(a,b)


소수 판별

소수 -> 1과 자기 자신만을 약수로 가지는 1보다 큰 수
(약수가 2개인 1보다 큰 수)

*** 주의할점
0 과 1은 소수가 아니다.


1.일일히 케이스 계산 -> 시간 초과 오류 발생 가능성 존재
2.제곱근 이용
9의 제곱근 -> 3
16의 제곱근 -> 4

제곱근으로 나누어서 나누어 떨어지는지 판별


3.에라토스테네스의 체 이용



나누기 / 나머지 활용

나누기 연산자 -> /
나머지 연산자 -> %


순열
주어진 원소들 중에서 특정 개수의 원소를 순서에 따라 나열하는 경우의 수

전체 원소의 개수가 n이고 , r개를 순서에 따라 나열하는 경우
P(n,r) = n! / (n-r)!


*** 팩토리얼 구하는 방식
n! = n * (n-1) * (n-2) * .... * 2 * 1

1.재귀 방식

2.반복문 사용

3.BigInteger 사용


조합
주어진 원소들 중에서 특정 개수를 원소의 순서와 관계없이 선택하는 경우의 수

전체 원소의 개수가 n이고 , r개를 선택하는 경우
C(n,r) = n! / r!(n-r)!


소인수 분해
어떤 자연수 n을 소수의 곱으로 표현한 형태

60 = 2^2 * 3^1 * 5^1
